/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
                            
}

PARSER_BEGIN(Parser)
package patternsGrammar;

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileNotFoundException;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
  public static void main(String args []) throws ParseException, FileNotFoundException
  {
    InputStream input = System.in;
    if(args.length > 0)
	 	input = new FileInputStream(args[0]);
   
    Parser parser = new Parser(input);
    //SimpleNode root = parser.Statement();
    BetterNode root = parser.Start();

    root.dump("");
	
  }
}

/*int eval(SimpleNode node) {
	if(node.jjtGetNumChildren() == 0) // leaf node with integer value
		return node.val;
	else if(node.jjtGetNumChildren() == 1) // only one child
		return this.eval((SimpleNode) node.jjtGetChild(0));

	SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
	SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

	switch(node.Op) {
 		case MyConstants.ADD : return eval( lhs ) + eval( rhs );
	 	case MyConstants.SUB : return eval( lhs ) - eval( rhs );
 		case MyConstants.MUL : return eval( lhs ) * eval( rhs );
 		case MyConstants.DIV : return eval( lhs ) / eval( rhs );

		default : // abort


	System.out.println("Operador ilegal!");
	System.exit(1);
	}
	return 0;
}*/

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}
TOKEN : {

  < IF: "if" > |
  < ELSE: "else" > |
  < WHILE: "while" > |
  < RETURN: "return" > |
  
  < PATTERN: "@" (["a"-"z","_","A"-"Z","0"-"9"])+ > |
  
  
  < INTEGER: ("-")? (["0"-"9"])+ > |
  < STRING: "\"" (~["\""])+ "\"" > | //INCOMPLETE
  < FLOAT: ("-")? (["0"-"9"])+ "." (["0"-"9"])+> |
  < CHAR: "'" (~["\""]) "'" >  |	
  < BOOLEAN: ("true" | "false")>  |
  < NULL: "null">  |
  
  < BASIC_TYPE: ("byte" | "short" | "char" | "int" | "long" | "float" | "double" | "boolean") > |
  < ASSIGNMENT_OPERATOR: ("+" | "-" | "*" | "/" | "&" | "|" | "^" | "%" | "<<" | ">>" | ">>>")? "=" > |
  < INFIX_OPERATOR: ("||" | "&&" | "|" | "^" | "&" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "<<" | ">>" | ">>>" | "+" | "-" | "*" | "/" | "%") > |
  < PREFIX_OPERATOR: ("+" | "-" | "~" | "!" | "++" | "--") > |

  < IDENTIFIER: ["a"-"z","_","A"-"Z"] (["a"-"z","_","A"-"Z","0"-"9"])* > |
  < ENDJAVA : "@@">|
  < STARTJAVA: "@@" (["a"-"z","_","A"-"Z","0"-"9"])+ >
  }


BetterNode Start() : {/*@bgen(jjtree) Start */
  BetterNode jjtn000 = new BetterNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Start */
        try {
/*@egen*/

 	(Rule())+ <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
 
    {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Rule(): {/*@bgen(jjtree) Rule */
               BetterNode jjtn000 = new BetterNode(JJTRULE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Rule */
        try {
/*@egen*/
	(t=< STARTJAVA > { jjtn000.value = t.image; })
	(Statement())+
	< ENDJAVA >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


//INCOMPLETE
BetterNode Statement() : {/*@bgen(jjtree) Statement */
  BetterNode jjtn000 = new BetterNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
        try {
/*@egen*/
  	(
  	  	( Block() ) { jjtn000.value = "block"; } |  	  	( Expression() ) { jjtn000.value = "statement"; }|
    	( < IF > ParExpression() Statement()
    		( < ELSE > Statement() )?
    	) { jjtn000.value = "if"; }|
    	( < WHILE > ParExpression() Statement() ) { jjtn000.value = "while"; }|
    	( < RETURN > Expression() ) { jjtn000.value = "return"; }
    	
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expression() : {/*@bgen(jjtree) Expression */
  BetterNode jjtn000 = new BetterNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}	
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
  	AssignmentExpression() ";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Block() : {/*@bgen(jjtree) Block */
  BetterNode jjtn000 = new BetterNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
  	"{" (Statement())* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ParExpression() : {/*@bgen(jjtree) ParExpression */
  BetterNode jjtn000 = new BetterNode(JJTPAREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParExpression */
        try {
/*@egen*/
  	"(" AssignmentExpression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AssignmentExpression() : {/*@bgen(jjtree) AssignmentExpression */
                               BetterNode jjtn000 = new BetterNode(JJTASSIGNMENTEXPRESSION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AssignmentExpression */
        try {
/*@egen*/
  	VariableDeclaratorId() 

  	t=< ASSIGNMENT_OPERATOR >{ jjtn000.value = t.image; }

  	Primary()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariableDeclaratorId() : {/*@bgen(jjtree) VariableDeclaratorId */
  BetterNode jjtn000 = new BetterNode(JJTVARIABLEDECLARATORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) VariableDeclaratorId */
  try {
/*@egen*/

  Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void ConditionalExpression() : {/*@bgen(jjtree) ConditionalExpression */
  BetterNode jjtn000 = new BetterNode(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConditionalExpression */
        try {
/*@egen*/
  	AtomicExpression() (ConditionalExpressionRest())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//INCOMPLETE
void ConditionalExpressionRest() : {/*@bgen(jjtree) ConditionalExpressionRest */
                                    BetterNode jjtn000 = new BetterNode(JJTCONDITIONALEXPRESSIONREST);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ConditionalExpressionRest */
        try {
/*@egen*/
  	t=< INFIX_OPERATOR > { jjtn000.value = t.image; }
  	AtomicExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//INCOMPLETE
void AtomicExpression() : {/*@bgen(jjtree) AtomicExpression */
                           BetterNode jjtn000 = new BetterNode(JJTATOMICEXPRESSION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AtomicExpression */
        try {
/*@egen*/
  	(  	  Primary() |
  	  (
  	    	t=< PREFIX_OPERATOR > { jjtn000.value = t.image; }
  	  		AtomicExpression()
  	  )
  	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//INCOMPLETE
void Primary() : {/*@bgen(jjtree) Primary */
  BetterNode jjtn000 = new BetterNode(JJTPRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Primary */
        try {
/*@egen*/
  	(
  	  Literal() | ParExpression() | Identifier() | Pattern()  	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Pattern() : {/*@bgen(jjtree) Pattern */
                  BetterNode jjtn000 = new BetterNode(JJTPATTERN);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Pattern */
        try {
/*@egen*/
	t=< PATTERN >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	  
}

//INCOMPLETE
void Literal() : {/*@bgen(jjtree) Literal */
                  BetterNode jjtn000 = new BetterNode(JJTLITERAL);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Literal */
        try {
/*@egen*/
  	(
		t=< INTEGER >/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {	jjtn000.value = new Integer(t.image); 	} |
  	   	t=< FLOAT >/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { jjtn000.value = new Float(t.image);} |
  	   	t=< STRING >/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.value = t.image;} |
  	   	t=< CHAR >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { jjtn000.value = t.image.charAt(1);} |
  	   	t=< BOOLEAN >/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ { jjtn000.value = new Boolean(t.image);} |
  	   	t=< NULL >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { }
  	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//INCOMPLETE
void Identifier() : {/*@bgen(jjtree) Identifier */
                     BetterNode jjtn000 = new BetterNode(JJTIDENTIFIER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t=< IDENTIFIER >{ jjtn000.value = t.image;}
	(	"."
		t=< IDENTIFIER >{ jjtn000.value += "." + t.image;}
	)*/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
