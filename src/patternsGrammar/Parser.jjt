/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  NODE_CLASS = "BetterNode";
}

PARSER_BEGIN(Parser)
package patternsGrammar;

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileNotFoundException;

public class Parser
{
  public static void main(String args []) throws ParseException, FileNotFoundException
  {
    InputStream input = System.in;
    if(args.length > 0)
	 	input = new FileInputStream(args[0]);
   
    Parser parser = new Parser(input);
    //SimpleNode root = parser.Statement();
    BetterNode root = parser.Start();

    root.dump("");
	
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}
TOKEN : {

  < IF: "if" > |
  < ELSE: "else" > |
  < WHILE: "while" > |
  < RETURN: "return" > |
  
  < PATTERN: "@" (["a"-"z","_","A"-"Z","0"-"9"])+ > |
  
  
  < INTEGER: ("-")? (["0"-"9"])+ > |
  < STRING: "\"" (~["\""])+ "\"" > | //INCOMPLETE
  < FLOAT: ("-")? (["0"-"9"])+ "." (["0"-"9"])+> |
  < CHAR: "'" (~["\""]) "'" >  |	
  < BOOLEAN: ("true" | "false")>  |
  < NULL: "null">  |
  
  < PRIMITIVE_TYPE: ("byte" | "short" | "char" | "int" | "long" | "float" | "double" | "boolean") > |
  < ASSIGNMENT_OPERATOR: ("+" | "-" | "*" | "/" | "&" | "|" | "^" | "%" | "<<" | ">>" | ">>>")? "=" > |
  < INFIX_OPERATOR: ("||" | "&&" | "|" | "^" | "&" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "<<" | ">>" | ">>>" | "+" | "-" | "*" | "/" | "%") > |
  < PREFIX_OPERATOR: ("+" | "-" | "~" | "!" | "++" | "--") > |

  < IDENTIFIER: ["a"-"z","_","A"-"Z"] (["a"-"z","_","A"-"Z","0"-"9"])* > |
  < ENDJAVA : "@@">|
  < STARTJAVA: "@@" (["a"-"z","_","A"-"Z","0"-"9"])+ >
  }

/** BIG NODES **/

BetterNode Start() : { }
{

 	(Rule())+ <EOF>
 
    {return jjtThis;} 
}

void Rule(): { Token t;}
{
	(t=< STARTJAVA > { jjtThis.value = t.image; })
	
	(Statement())+

	< ENDJAVA >
}

/** STATEMENTS **/

void Block() : {}
{
  	"{" (BlockStatement())* "}"
}

void BlockStatement() : { }
{
  Statement()
}

void LocalVariableDeclarationStatement() : { }
{
  (TypeType())* VariableDeclarator() 
}

BetterNode Statement() : {}
{
  	LocalVariableDeclarationStatement() ";"

  	{return jjtThis;} 
}


/** EXPRESSIONS **/

void ParExpression() : {}
{
  	"(" Expression() ")"
}

void Expression() : { }
{
  	Primary()|
  	";"
}

void Primary() : {}
{
  ParExpression() |
  Identifier() |
  Literal() 
}

void VariableDeclaratorId() : { }
{
  (  	Pattern() |
  	(Identifier() ("[" "]")*)
  )
}

void VariableDeclarator() : {Token t;}
{
  VariableDeclaratorId()

  (t=< ASSIGNMENT_OPERATOR >{ jjtThis.value = t.image; }
    VariableInitializer())?

}

void VariableInitializer() : { }
{
  Expression()
}

void Pattern() : {Token t;}
{
	t=< PATTERN > { jjtThis.value = t.image;}
	  
}

void TypeType() : { Token t;}
{
  // Falta o tipo de uma classe
  PrimitiveType()
}

void PrimitiveType() : { Token t; }
{
	t = < PRIMITIVE_TYPE > { jjtThis.value = t.image;}
}

void Literal() : {Token t;}
{
  	(
		t=< INTEGER > {	jjtThis.value = new Integer(t.image); 	} |
  	   	t=< FLOAT > { jjtThis.value = new Float(t.image);} |
  	   	t=< STRING > { jjtThis.value = t.image;} |
  	   	t=< CHAR > { jjtThis.value = t.image.charAt(1);} |
  	   	t=< BOOLEAN > { jjtThis.value = new Boolean(t.image);} |
  	   	t=< NULL > { }
  	)
}

void Identifier() : {Token t;}
{
	t=< IDENTIFIER >{ jjtThis.value = t.image;}
}
