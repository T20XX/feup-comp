/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  NODE_CLASS = "BetterNode";
}

PARSER_BEGIN(Parser)
package patternsGrammar;

import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileNotFoundException;

public class Parser
{
  public static void main(String args []) throws ParseException, FileNotFoundException
  {
    InputStream input = System.in;
    if(args.length > 0)
	 	input = new FileInputStream(args[0]);
   
    Parser parser = new Parser(input);
    //SimpleNode root = parser.Statement();
    BetterNode root = parser.Statement();

    root.dump("");
	
  }
}

/*int eval(SimpleNode node) {
	if(node.jjtGetNumChildren() == 0) // leaf node with integer value
		return node.val;
	else if(node.jjtGetNumChildren() == 1) // only one child
		return this.eval((SimpleNode) node.jjtGetChild(0));

	SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
	SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child

	switch(node.Op) {
 		case MyConstants.ADD : return eval( lhs ) + eval( rhs );
	 	case MyConstants.SUB : return eval( lhs ) - eval( rhs );
 		case MyConstants.MUL : return eval( lhs ) * eval( rhs );
 		case MyConstants.DIV : return eval( lhs ) / eval( rhs );

		default : // abort


	System.out.println("Operador ilegal!");
	System.exit(1);
	}
	return 0;
}*/

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : {
  < IF: "if" > |
  < ELSE: "else" > |
  < WHILE: "while" > |
  
  < PATTERN: "@" (["a"-"z","_","A"-"Z","0"-"9"])+ > |
  
  
  < INTEGER: ("-")? (["0"-"9"])+ > |
  < STRING: "\"" (~["\""])+ "\"" > | //INCOMPLETE
  < FLOAT: ("-")? (["0"-"9"])+ "." (["0"-"9"])+> |
  < CHAR: "'" (~["\""]) "'" >  |	
  < BOOLEAN: ("true" | "false")>  |
  < NULL: "null">  |
  
  < BASIC_TYPE: ("byte" | "short" | "char" | "int" | "long" | "float" | "double" | "boolean") > |
  < ASSIGNMENT_OPERATOR: ("+" | "-" | "*" | "/" | "&" | "|" | "^" | "%" | "<<" | ">>" | ">>>")? "=" > |
  < INFIX_OPERATOR: ("||" | "&&" | "|" | "^" | "&" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "<<" | ">>" | ">>>" | "+" | "-" | "*" | "/" | "%") > |
  < PREFIX_OPERATOR: ("+" | "-" | "~" | "!" | "++" | "--") > |

  < IDENTIFIER: ["a"-"z","_","A"-"Z"] (["a"-"z","_","A"-"Z","0"-"9"])* >
  }

//INCOMPLETE
BetterNode Statement() : {}
{
  	(  	  	( StatementExpression() ";") |
    	( < IF > ParExpression() Statement()
    		( < ELSE > Statement() )?
    	) |
    	( < WHILE > ParExpression() Statement() )
    )
    {return jjtThis;} 
}

void StatementExpression() : {}	
{
  	Expression()
}

/**
 * A condition
 */
void ParExpression() : {}
{
  	"(" Expression() ")"
}

void Expression() : {}
{
  	Expression1() (< ASSIGNMENT_OPERATOR > Expression1())?
}

//INCOMPLETE
void Expression1() : {}
{
  	Expression2()
}

void Expression2() : {}
{
  	Expression3() (Expression2Rest())?
}

//INCOMPLETE
void Expression2Rest() : {}
{
  	< INFIX_OPERATOR > Expression3()
}

//INCOMPLETE
void Expression3() : {}
{
  	(  	  Primary() |
  	  ( < PREFIX_OPERATOR > Expression3() )
  	)
}

//INCOMPLETE
void Primary() : {}
{
  	(
  	  Literal() | ParExpression() | Identifier() | Pattern()  	)
}

void Pattern() : {Token t;}
{
	t=< PATTERN > { jjtThis.value = t.image;}
	  
}

//INCOMPLETE
void Literal() : {Token t;}
{
  	(
		t=< INTEGER > {	jjtThis.value = new Integer(t.image); 	} |
  	   	t=< FLOAT > { jjtThis.value = new Float(t.image);} |
  	   	t=< STRING > { jjtThis.value = t.image;} |
  	   	t=< CHAR > { jjtThis.value = t.image.charAt(1);} |
  	   	t=< BOOLEAN > { jjtThis.value = new Boolean(t.image);} |
  	   	t=< NULL > { }
  	)
}

//INCOMPLETE
void Identifier() : {Token t;}
{
	t=< IDENTIFIER >{ jjtThis.value = t.image;}
	(	"."
		t=< IDENTIFIER >{ jjtThis.value += "." + t.image;}
	)*
}
